@use "sass:math";
@use "sass:map";

$icon-size: 24px;

$variant-colors: (
  "fill": (
    "background": #007AFF,
    "text": white,
    "ripple": #ffffff40
  ),
  "bezeled": (
    "background": #4378FF1A,
    "text": #007AFF,
    "ripple": #007aff26
  ),
  "plain": (
    "background": transparent,
    "text": #007AFF,
    "ripple": #007aff26
  ),
  "gray": (
    "background": #0000000A,
    "text": #000000CC,
    "ripple": #0000000e
  ),
  "outline": (
    "background": transparent,
    "border": #0000000D,
    "text": #000000CC,
    "ripple": #0000000e
  ),
  "white": (
    "background": white,
    "text": #000000CC,
    "ripple": #0000000e
  ),
);

$sizes: (
  "base": (
    "border-radius": 8px,
    "sizes": (
      "sm": (
        "min-height": 38px,
        "padding-x": 12px,
      ),
      "md": (
        "min-height": 42px,
        "padding-x": 14px,
      ),
      "lg": (
        "min-height": 50px,
        "padding-x": 18px,
      )
    ),
  ),
  "ios": (
    "border-radius": 12px,
    "sizes": (
      "sm": (
        "min-height": 36px,
        "padding-x": 12px,
      ),
      "md": (
        "min-height": 42px,
        "padding-x": 14px,
      ),
      "lg": (
        "min-height": 50px,
        "padding-x": 18px,
        "border-radius": 10px
      )
    ),
  )
);

$block: ".tgui-button";

@mixin sizes($platform) {
  @each $size-type, $size-settings in map-get(map-get($sizes, $platform), "sizes") {
    $min-height: map-get($size-settings, "min-height");

    &-#{$size-type} {
      min-height: $min-height;
      padding: #{math.div($min-height - $icon-size - 2, 2)} map-get($size-settings, "padding-x");
    }
  }
}

#{$block} {
  border: none;
  cursor: pointer;
  overflow: hidden;
  appearance: none;
  padding: 0;
  transition: opacity 75ms;

  &--rounded {
    border-radius: 1000px;
  }

  &--stretched {
    width: 100%;
  }

  &--disabled {
    opacity: .35;
    cursor: not-allowed;
  }

  // Background and text colors.
  @each $variant, $variant-settings in $variant-colors {
    &--#{$variant} {
      background-color: map-get($variant-settings, "background");
      color: map-get($variant-settings, "text");
    }
  }

  // Border radius.
  @each $platform, $platform-settings in $sizes {
    &--#{$platform} {
      border-radius: map-get($platform-settings, "border-radius");

      @each $size-type, $size-settings in map-get($platform-settings, "sizes") {
        $border-radius: map-get($size-settings, "border-radius");

        @if $border-radius {
          &-#{$size-type} {
            border-radius: $border-radius;
          }
        }
      }
    }
  }
}

#{$block}__ripples {
  height: 100%;
  width: 100%;
  border: 1px solid transparent;
  border-radius: inherit;
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 75ms;

  &--base {
    @include sizes("base");
    gap: 12px;

    //// Color hover modifiers.
    //@each $type, $type-settings in (
    //  "fill": [transparentize(#007AFF, .15)],
    //  "bezeled": [transparentize(#007AFF, .93)],
    //  //"plain": [transparentize(#007AFF, .97)],
    //  //"gray": [],
    //  //"outline": [],
    //  //"white": [],
    //) {
    //  &-#{$type}:hover {
    //    background-color: nth($type-settings, 1);
    //  }
    //}
  }

  &--ios {
    @include sizes("ios");
    gap: 10px;
  }

  // Border colors.
  @each $variant, $variant-settings in $variant-colors {
    $border-color: map-get($variant-settings, "border");

    @if $border-color {
      &--#{$variant} {
        border-color: $border-color;
      }
    }
  }
}

#{$block}__ripple {
  // Colors.
  @each $variant, $variant-settings in $variant-colors {
    &--#{$variant} {
      background-color: map-get($variant-settings, "ripple");
    }
  }
}

#{$block}__icon-container {
  width: $icon-size;
  height: $icon-size;
  display: flex;
  align-items: center;
  justify-content: center;
}

#{$block}__icon {
  color: currentColor;
}
